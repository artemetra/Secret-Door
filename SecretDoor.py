import requests
import re
from bs4 import BeautifulSoup

# aiogram stuff
from aiogram import types, Dispatcher, Bot
from aiogram.dispatcher import Dispatcher, FSMContext 
from aiogram.utils import executor
from aiogram.utils.helper import Helper, ListItem
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.dispatcher.filters.state import State, StatesGroup

try:
    from _config import token
    bot = Bot(token = token, parse_mode='MarkdownV2')
except ModuleNotFoundError:
    token = input("_config.py is absent, enter your token here: ")
    try:
        bot = Bot(token = token, parse_mode='MarkdownV2')
    except Exception as e:
        print(f"Invalid token! Error: {e}")

class google_search(StatesGroup):
  key_Word = State()

bots = InlineKeyboardMarkup()
btn1 = InlineKeyboardButton(text = '‚ùî –ü–æ–º–æ—â—å', callback_data='help')
btn2 = InlineKeyboardButton(text = 'üîé –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫', callback_data='search')
bots.add(btn1)
bots.add(btn2)

dp = Dispatcher(bot = bot, storage = MemoryStorage())

def extract_results(link: str) -> list:
    response = requests.get(link).text
    result_divs = BeautifulSoup(response, 'lxml').find_all('div', class_='g')
    links = []
    for div in result_divs:
        links.append(re.search(r'(?:href\=")(.+?)(?:")', BeautifulSoup(div, 'lxml').find('a')).group(1))
    return links

@dp.message_handler(text='/start')
async def start(m: types.Message):
  await m.answer('–ü—Ä–∏–≤–µ—Ç –°—Ç—Ä–∞–Ω–Ω–∏–∫, —è –Ω–∞–π–¥—É –¥–ª—è —Ç–µ–±—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≥—Ä—É–ø–ø—ã –∏ –∫–∞–Ω–∞–ª—ã\n'
'–¢—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É',
reply_markup = bots)

@dp.callback_query_handler(text="help")
async def help(call: types.CallbackQuery):
    await call.message.answer('ü§ñ –ë–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å –ø–æ–∏—Å–∫–æ–º —á–∞—Å—Ç–Ω—ã—Ö —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤ –ø–æ –∑–Ω–∞–º–µ–Ω–∏—Ç—ã–º —Ä–µ—Å—É—Ä—Å–∞–º –æ–±–ª–µ–≥—á–∞—è –≤–∞–º —Ä–∞–±–æ—Ç—É\n\n'
'**–ú–µ–ª–∫–∞—è —Å–ø—Ä–∞–≤–∫–∞:**\n'
'–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∫–∞–Ω–∞–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞, –≤–º–µ—Å—Ç–æ –ø—Ä–æ–±–µ–ª–∞ —Å—Ç–∞–≤—å—Ç–µ "\+"\.', reply_markup=bots)


@dp.callback_query_handler(text="search")
async def search(call: types.CallbackQuery):
    await call.message.answer('–û–∫–µ–π, –≤–≤–µ–¥–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é —Ç–µ–±—è —Ç–µ–º—É –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –¥–ª—è —Ç–µ–±—è –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –∫–∞–Ω–∞–ª—ã/–≥—Ä—É–ø–ø—ã\.\n'
    '–î–ª—è –æ—Ç–º–µ–Ω—ã \> /cancel', reply_markup=bots)
    await google_search.key_Word.set()

@dp.message_handler(state = google_search.key_Word)
async def id(m: types.Message, state: FSMContext):
  text = m.text
  await state.update_data(text1 = text)

  if text == '/cancel':
    await m.answer('–û—Ç–º–µ–Ω–µ–Ω–Ω–æ', reply_markup=bots)
    await state.finish()
  else:
    # await m.answer(f"""–í—Å–µ —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏\.\.\.\n
    #                    google\.com/search\?q\=site:t\.me/joinchat\+{text}\n
    #                    yandex\.uz/search/\?text\=site\%3At\.me%2Fjoinchat\+{text}""", reply_markup=bots)
    await m.answer("–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫..")
    ##TODO Implement extraction of the results
    result_list = []
    for i in range(100): # arbitrary range - might changes
        google_link = f"google.com/search?q=site:t.me/joinchat+{text}&start={i}"
        result_list.append(extract_results(google_link))
    await m.answer(f"result_list: {result_list[:20]}")
    await state.finish()

if __name__ == '__main__':
    print("Starting...")
    executor.start_polling(dp)